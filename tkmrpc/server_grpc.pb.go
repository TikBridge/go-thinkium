// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: server.proto

package tkmrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Node_Ping_FullMethodName                      = "/tkmrpc.node/Ping"
	Node_GetAccount_FullMethodName                = "/tkmrpc.node/GetAccount"
	Node_GetTransactionByHash_FullMethodName      = "/tkmrpc.node/GetTransactionByHash"
	Node_GetTxProof_FullMethodName                = "/tkmrpc.node/GetTxProof"
	Node_GetTxLocalProof_FullMethodName           = "/tkmrpc.node/GetTxLocalProof"
	Node_GetTxFinalProof_FullMethodName           = "/tkmrpc.node/GetTxFinalProof"
	Node_GetTransactions_FullMethodName           = "/tkmrpc.node/GetTransactions"
	Node_SendTx_FullMethodName                    = "/tkmrpc.node/SendTx"
	Node_GetStats_FullMethodName                  = "/tkmrpc.node/GetStats"
	Node_GetBlockHeader_FullMethodName            = "/tkmrpc.node/GetBlockHeader"
	Node_GetBlock_FullMethodName                  = "/tkmrpc.node/GetBlock"
	Node_GetBlocks_FullMethodName                 = "/tkmrpc.node/GetBlocks"
	Node_GetBlockHeaders_FullMethodName           = "/tkmrpc.node/GetBlockHeaders"
	Node_GetBlockTxs_FullMethodName               = "/tkmrpc.node/GetBlockTxs"
	Node_CallTransaction_FullMethodName           = "/tkmrpc.node/CallTransaction"
	Node_GetChainInfo_FullMethodName              = "/tkmrpc.node/GetChainInfo"
	Node_GetCommittee_FullMethodName              = "/tkmrpc.node/GetCommittee"
	Node_MakeVccProof_FullMethodName              = "/tkmrpc.node/MakeVccProof"
	Node_MakeCCCExistenceProof_FullMethodName     = "/tkmrpc.node/MakeCCCExistenceProof"
	Node_GetCCCRelativeTx_FullMethodName          = "/tkmrpc.node/GetCCCRelativeTx"
	Node_GetAccountWithChainHeight_FullMethodName = "/tkmrpc.node/GetAccountWithChainHeight"
	Node_GetRRProofs_FullMethodName               = "/tkmrpc.node/GetRRProofs"
	Node_GetRRCurrent_FullMethodName              = "/tkmrpc.node/GetRRCurrent"
	Node_SendBlock_FullMethodName                 = "/tkmrpc.node/SendBlock"
	Node_TryCrypto_FullMethodName                 = "/tkmrpc.node/TryCrypto"
	Node_GetRRInfo_FullMethodName                 = "/tkmrpc.node/GetRRInfo"
	Node_GetBTransactions_FullMethodName          = "/tkmrpc.node/GetBTransactions"
	Node_GetRRTxByHash_FullMethodName             = "/tkmrpc.node/GetRRTxByHash"
	Node_Estimate_FullMethodName                  = "/tkmrpc.node/Estimate"
	Node_GetAccountAtHeight_FullMethodName        = "/tkmrpc.node/GetAccountAtHeight"
	Node_GetCommWithProof_FullMethodName          = "/tkmrpc.node/GetCommWithProof"
	Node_ListRRChanges_FullMethodName             = "/tkmrpc.node/ListRRChanges"
	Node_GetConfirmeds_FullMethodName             = "/tkmrpc.node/GetConfirmeds"
	Node_RebootMainChain_FullMethodName           = "/tkmrpc.node/RebootMainChain"
	Node_ListBridgeSessionsToAt_FullMethodName    = "/tkmrpc.node/ListBridgeSessionsToAt"
	Node_ListRRInfos_FullMethodName               = "/tkmrpc.node/ListRRInfos"
)

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	Ping(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	GetAccount(ctx context.Context, in *RpcAddress, opts ...grpc.CallOption) (*RpcResponse, error)
	GetTransactionByHash(ctx context.Context, in *RpcTXHash, opts ...grpc.CallOption) (*RpcResponse, error)
	GetTxProof(ctx context.Context, in *RpcTXHash, opts ...grpc.CallOption) (*RpcResponse, error)
	GetTxLocalProof(ctx context.Context, in *RpcTXHash, opts ...grpc.CallOption) (*RpcResponseStream, error)
	GetTxFinalProof(ctx context.Context, in *RpcTxProofReq, opts ...grpc.CallOption) (*RpcResponseStream, error)
	GetTransactions(ctx context.Context, in *RpcTxList, opts ...grpc.CallOption) (*RpcResponse, error)
	SendTx(ctx context.Context, in *RpcTx, opts ...grpc.CallOption) (*RpcResponse, error)
	GetStats(ctx context.Context, in *RpcStatsReq, opts ...grpc.CallOption) (*RpcResponse, error)
	GetBlockHeader(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponse, error)
	GetBlock(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponseStream, error)
	GetBlocks(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponseStream, error)
	GetBlockHeaders(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponse, error)
	GetBlockTxs(ctx context.Context, in *RpcBlockTxsReq, opts ...grpc.CallOption) (*RpcResponse, error)
	CallTransaction(ctx context.Context, in *RpcTx, opts ...grpc.CallOption) (*RpcResponse, error)
	GetChainInfo(ctx context.Context, in *RpcChainInfoReq, opts ...grpc.CallOption) (*RpcResponse, error)
	GetCommittee(ctx context.Context, in *RpcChainEpoch, opts ...grpc.CallOption) (*RpcResponse, error)
	MakeVccProof(ctx context.Context, in *RpcCashCheck, opts ...grpc.CallOption) (*RpcResponse, error)
	MakeCCCExistenceProof(ctx context.Context, in *RpcCashCheck, opts ...grpc.CallOption) (*RpcResponse, error)
	GetCCCRelativeTx(ctx context.Context, in *RpcCashCheck, opts ...grpc.CallOption) (*RpcResponse, error)
	GetAccountWithChainHeight(ctx context.Context, in *RpcAddress, opts ...grpc.CallOption) (*RpcResponse, error)
	GetRRProofs(ctx context.Context, in *RpcRRProofReq, opts ...grpc.CallOption) (*RpcResponse, error)
	GetRRCurrent(ctx context.Context, in *RpcChainRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	SendBlock(ctx context.Context, in *RpcMsgReq, opts ...grpc.CallOption) (*RpcResponse, error)
	TryCrypto(ctx context.Context, in *RpcMsgReq, opts ...grpc.CallOption) (*RpcResponse, error)
	GetRRInfo(ctx context.Context, in *RpcGetRRInfoReq, opts ...grpc.CallOption) (*RpcResponseStream, error)
	GetBTransactions(ctx context.Context, in *RpcTxFilter, opts ...grpc.CallOption) (*RpcResponseStream, error)
	GetRRTxByHash(ctx context.Context, in *RpcTXHash, opts ...grpc.CallOption) (*RpcResponseStream, error)
	Estimate(ctx context.Context, in *RpcTx, opts ...grpc.CallOption) (*RpcResponse, error)
	GetAccountAtHeight(ctx context.Context, in *RpcAccountAt, opts ...grpc.CallOption) (*RpcResponse, error)
	GetCommWithProof(ctx context.Context, in *RpcChainEpoch, opts ...grpc.CallOption) (*RpcResponseStream, error)
	ListRRChanges(ctx context.Context, in *RpcRRChangesReq, opts ...grpc.CallOption) (*RpcResponseStream, error)
	GetConfirmeds(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponseStream, error)
	RebootMainChain(ctx context.Context, in *RpcReboot, opts ...grpc.CallOption) (*RpcResponse, error)
	ListBridgeSessionsToAt(ctx context.Context, in *RpcBridgeToAt, opts ...grpc.CallOption) (*RpcResponseStream, error)
	ListRRInfos(ctx context.Context, in *RpcBlockTxsReq, opts ...grpc.CallOption) (*RpcResponseStream, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Ping(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAccount(ctx context.Context, in *RpcAddress, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetTransactionByHash(ctx context.Context, in *RpcTXHash, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetTransactionByHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetTxProof(ctx context.Context, in *RpcTXHash, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetTxProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetTxLocalProof(ctx context.Context, in *RpcTXHash, opts ...grpc.CallOption) (*RpcResponseStream, error) {
	out := new(RpcResponseStream)
	err := c.cc.Invoke(ctx, Node_GetTxLocalProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetTxFinalProof(ctx context.Context, in *RpcTxProofReq, opts ...grpc.CallOption) (*RpcResponseStream, error) {
	out := new(RpcResponseStream)
	err := c.cc.Invoke(ctx, Node_GetTxFinalProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetTransactions(ctx context.Context, in *RpcTxList, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SendTx(ctx context.Context, in *RpcTx, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_SendTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetStats(ctx context.Context, in *RpcStatsReq, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetBlockHeader(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetBlockHeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetBlock(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponseStream, error) {
	out := new(RpcResponseStream)
	err := c.cc.Invoke(ctx, Node_GetBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetBlocks(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponseStream, error) {
	out := new(RpcResponseStream)
	err := c.cc.Invoke(ctx, Node_GetBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetBlockHeaders(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetBlockHeaders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetBlockTxs(ctx context.Context, in *RpcBlockTxsReq, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetBlockTxs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CallTransaction(ctx context.Context, in *RpcTx, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_CallTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetChainInfo(ctx context.Context, in *RpcChainInfoReq, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetChainInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetCommittee(ctx context.Context, in *RpcChainEpoch, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetCommittee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) MakeVccProof(ctx context.Context, in *RpcCashCheck, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_MakeVccProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) MakeCCCExistenceProof(ctx context.Context, in *RpcCashCheck, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_MakeCCCExistenceProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetCCCRelativeTx(ctx context.Context, in *RpcCashCheck, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetCCCRelativeTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAccountWithChainHeight(ctx context.Context, in *RpcAddress, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetAccountWithChainHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetRRProofs(ctx context.Context, in *RpcRRProofReq, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetRRProofs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetRRCurrent(ctx context.Context, in *RpcChainRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetRRCurrent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SendBlock(ctx context.Context, in *RpcMsgReq, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_SendBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) TryCrypto(ctx context.Context, in *RpcMsgReq, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_TryCrypto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetRRInfo(ctx context.Context, in *RpcGetRRInfoReq, opts ...grpc.CallOption) (*RpcResponseStream, error) {
	out := new(RpcResponseStream)
	err := c.cc.Invoke(ctx, Node_GetRRInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetBTransactions(ctx context.Context, in *RpcTxFilter, opts ...grpc.CallOption) (*RpcResponseStream, error) {
	out := new(RpcResponseStream)
	err := c.cc.Invoke(ctx, Node_GetBTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetRRTxByHash(ctx context.Context, in *RpcTXHash, opts ...grpc.CallOption) (*RpcResponseStream, error) {
	out := new(RpcResponseStream)
	err := c.cc.Invoke(ctx, Node_GetRRTxByHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Estimate(ctx context.Context, in *RpcTx, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_Estimate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAccountAtHeight(ctx context.Context, in *RpcAccountAt, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_GetAccountAtHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetCommWithProof(ctx context.Context, in *RpcChainEpoch, opts ...grpc.CallOption) (*RpcResponseStream, error) {
	out := new(RpcResponseStream)
	err := c.cc.Invoke(ctx, Node_GetCommWithProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListRRChanges(ctx context.Context, in *RpcRRChangesReq, opts ...grpc.CallOption) (*RpcResponseStream, error) {
	out := new(RpcResponseStream)
	err := c.cc.Invoke(ctx, Node_ListRRChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetConfirmeds(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponseStream, error) {
	out := new(RpcResponseStream)
	err := c.cc.Invoke(ctx, Node_GetConfirmeds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RebootMainChain(ctx context.Context, in *RpcReboot, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Node_RebootMainChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListBridgeSessionsToAt(ctx context.Context, in *RpcBridgeToAt, opts ...grpc.CallOption) (*RpcResponseStream, error) {
	out := new(RpcResponseStream)
	err := c.cc.Invoke(ctx, Node_ListBridgeSessionsToAt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListRRInfos(ctx context.Context, in *RpcBlockTxsReq, opts ...grpc.CallOption) (*RpcResponseStream, error) {
	out := new(RpcResponseStream)
	err := c.cc.Invoke(ctx, Node_ListRRInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	Ping(context.Context, *RpcRequest) (*RpcResponse, error)
	GetAccount(context.Context, *RpcAddress) (*RpcResponse, error)
	GetTransactionByHash(context.Context, *RpcTXHash) (*RpcResponse, error)
	GetTxProof(context.Context, *RpcTXHash) (*RpcResponse, error)
	GetTxLocalProof(context.Context, *RpcTXHash) (*RpcResponseStream, error)
	GetTxFinalProof(context.Context, *RpcTxProofReq) (*RpcResponseStream, error)
	GetTransactions(context.Context, *RpcTxList) (*RpcResponse, error)
	SendTx(context.Context, *RpcTx) (*RpcResponse, error)
	GetStats(context.Context, *RpcStatsReq) (*RpcResponse, error)
	GetBlockHeader(context.Context, *RpcBlockHeight) (*RpcResponse, error)
	GetBlock(context.Context, *RpcBlockHeight) (*RpcResponseStream, error)
	GetBlocks(context.Context, *RpcBlockHeight) (*RpcResponseStream, error)
	GetBlockHeaders(context.Context, *RpcBlockHeight) (*RpcResponse, error)
	GetBlockTxs(context.Context, *RpcBlockTxsReq) (*RpcResponse, error)
	CallTransaction(context.Context, *RpcTx) (*RpcResponse, error)
	GetChainInfo(context.Context, *RpcChainInfoReq) (*RpcResponse, error)
	GetCommittee(context.Context, *RpcChainEpoch) (*RpcResponse, error)
	MakeVccProof(context.Context, *RpcCashCheck) (*RpcResponse, error)
	MakeCCCExistenceProof(context.Context, *RpcCashCheck) (*RpcResponse, error)
	GetCCCRelativeTx(context.Context, *RpcCashCheck) (*RpcResponse, error)
	GetAccountWithChainHeight(context.Context, *RpcAddress) (*RpcResponse, error)
	GetRRProofs(context.Context, *RpcRRProofReq) (*RpcResponse, error)
	GetRRCurrent(context.Context, *RpcChainRequest) (*RpcResponse, error)
	SendBlock(context.Context, *RpcMsgReq) (*RpcResponse, error)
	TryCrypto(context.Context, *RpcMsgReq) (*RpcResponse, error)
	GetRRInfo(context.Context, *RpcGetRRInfoReq) (*RpcResponseStream, error)
	GetBTransactions(context.Context, *RpcTxFilter) (*RpcResponseStream, error)
	GetRRTxByHash(context.Context, *RpcTXHash) (*RpcResponseStream, error)
	Estimate(context.Context, *RpcTx) (*RpcResponse, error)
	GetAccountAtHeight(context.Context, *RpcAccountAt) (*RpcResponse, error)
	GetCommWithProof(context.Context, *RpcChainEpoch) (*RpcResponseStream, error)
	ListRRChanges(context.Context, *RpcRRChangesReq) (*RpcResponseStream, error)
	GetConfirmeds(context.Context, *RpcBlockHeight) (*RpcResponseStream, error)
	RebootMainChain(context.Context, *RpcReboot) (*RpcResponse, error)
	ListBridgeSessionsToAt(context.Context, *RpcBridgeToAt) (*RpcResponseStream, error)
	ListRRInfos(context.Context, *RpcBlockTxsReq) (*RpcResponseStream, error)
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) Ping(context.Context, *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedNodeServer) GetAccount(context.Context, *RpcAddress) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedNodeServer) GetTransactionByHash(context.Context, *RpcTXHash) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHash not implemented")
}
func (UnimplementedNodeServer) GetTxProof(context.Context, *RpcTXHash) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxProof not implemented")
}
func (UnimplementedNodeServer) GetTxLocalProof(context.Context, *RpcTXHash) (*RpcResponseStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxLocalProof not implemented")
}
func (UnimplementedNodeServer) GetTxFinalProof(context.Context, *RpcTxProofReq) (*RpcResponseStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxFinalProof not implemented")
}
func (UnimplementedNodeServer) GetTransactions(context.Context, *RpcTxList) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedNodeServer) SendTx(context.Context, *RpcTx) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTx not implemented")
}
func (UnimplementedNodeServer) GetStats(context.Context, *RpcStatsReq) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedNodeServer) GetBlockHeader(context.Context, *RpcBlockHeight) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeader not implemented")
}
func (UnimplementedNodeServer) GetBlock(context.Context, *RpcBlockHeight) (*RpcResponseStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedNodeServer) GetBlocks(context.Context, *RpcBlockHeight) (*RpcResponseStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedNodeServer) GetBlockHeaders(context.Context, *RpcBlockHeight) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaders not implemented")
}
func (UnimplementedNodeServer) GetBlockTxs(context.Context, *RpcBlockTxsReq) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockTxs not implemented")
}
func (UnimplementedNodeServer) CallTransaction(context.Context, *RpcTx) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallTransaction not implemented")
}
func (UnimplementedNodeServer) GetChainInfo(context.Context, *RpcChainInfoReq) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainInfo not implemented")
}
func (UnimplementedNodeServer) GetCommittee(context.Context, *RpcChainEpoch) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommittee not implemented")
}
func (UnimplementedNodeServer) MakeVccProof(context.Context, *RpcCashCheck) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeVccProof not implemented")
}
func (UnimplementedNodeServer) MakeCCCExistenceProof(context.Context, *RpcCashCheck) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeCCCExistenceProof not implemented")
}
func (UnimplementedNodeServer) GetCCCRelativeTx(context.Context, *RpcCashCheck) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCCCRelativeTx not implemented")
}
func (UnimplementedNodeServer) GetAccountWithChainHeight(context.Context, *RpcAddress) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountWithChainHeight not implemented")
}
func (UnimplementedNodeServer) GetRRProofs(context.Context, *RpcRRProofReq) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRRProofs not implemented")
}
func (UnimplementedNodeServer) GetRRCurrent(context.Context, *RpcChainRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRRCurrent not implemented")
}
func (UnimplementedNodeServer) SendBlock(context.Context, *RpcMsgReq) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBlock not implemented")
}
func (UnimplementedNodeServer) TryCrypto(context.Context, *RpcMsgReq) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryCrypto not implemented")
}
func (UnimplementedNodeServer) GetRRInfo(context.Context, *RpcGetRRInfoReq) (*RpcResponseStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRRInfo not implemented")
}
func (UnimplementedNodeServer) GetBTransactions(context.Context, *RpcTxFilter) (*RpcResponseStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBTransactions not implemented")
}
func (UnimplementedNodeServer) GetRRTxByHash(context.Context, *RpcTXHash) (*RpcResponseStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRRTxByHash not implemented")
}
func (UnimplementedNodeServer) Estimate(context.Context, *RpcTx) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Estimate not implemented")
}
func (UnimplementedNodeServer) GetAccountAtHeight(context.Context, *RpcAccountAt) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAtHeight not implemented")
}
func (UnimplementedNodeServer) GetCommWithProof(context.Context, *RpcChainEpoch) (*RpcResponseStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommWithProof not implemented")
}
func (UnimplementedNodeServer) ListRRChanges(context.Context, *RpcRRChangesReq) (*RpcResponseStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRRChanges not implemented")
}
func (UnimplementedNodeServer) GetConfirmeds(context.Context, *RpcBlockHeight) (*RpcResponseStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfirmeds not implemented")
}
func (UnimplementedNodeServer) RebootMainChain(context.Context, *RpcReboot) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootMainChain not implemented")
}
func (UnimplementedNodeServer) ListBridgeSessionsToAt(context.Context, *RpcBridgeToAt) (*RpcResponseStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBridgeSessionsToAt not implemented")
}
func (UnimplementedNodeServer) ListRRInfos(context.Context, *RpcBlockTxsReq) (*RpcResponseStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRRInfos not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Ping(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetAccount(ctx, req.(*RpcAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTXHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetTransactionByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetTransactionByHash(ctx, req.(*RpcTXHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetTxProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTXHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetTxProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetTxProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetTxProof(ctx, req.(*RpcTXHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetTxLocalProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTXHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetTxLocalProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetTxLocalProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetTxLocalProof(ctx, req.(*RpcTXHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetTxFinalProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTxProofReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetTxFinalProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetTxFinalProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetTxFinalProof(ctx, req.(*RpcTxProofReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTxList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetTransactions(ctx, req.(*RpcTxList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SendTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SendTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendTx(ctx, req.(*RpcTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetStats(ctx, req.(*RpcStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcBlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetBlockHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetBlockHeader(ctx, req.(*RpcBlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcBlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetBlock(ctx, req.(*RpcBlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcBlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetBlocks(ctx, req.(*RpcBlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetBlockHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcBlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetBlockHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetBlockHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetBlockHeaders(ctx, req.(*RpcBlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetBlockTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcBlockTxsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetBlockTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetBlockTxs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetBlockTxs(ctx, req.(*RpcBlockTxsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CallTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CallTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_CallTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CallTransaction(ctx, req.(*RpcTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcChainInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetChainInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetChainInfo(ctx, req.(*RpcChainInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetCommittee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcChainEpoch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetCommittee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetCommittee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetCommittee(ctx, req.(*RpcChainEpoch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_MakeVccProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcCashCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).MakeVccProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_MakeVccProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).MakeVccProof(ctx, req.(*RpcCashCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_MakeCCCExistenceProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcCashCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).MakeCCCExistenceProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_MakeCCCExistenceProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).MakeCCCExistenceProof(ctx, req.(*RpcCashCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetCCCRelativeTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcCashCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetCCCRelativeTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetCCCRelativeTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetCCCRelativeTx(ctx, req.(*RpcCashCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAccountWithChainHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetAccountWithChainHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetAccountWithChainHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetAccountWithChainHeight(ctx, req.(*RpcAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetRRProofs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRRProofReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRRProofs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetRRProofs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRRProofs(ctx, req.(*RpcRRProofReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetRRCurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRRCurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetRRCurrent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRRCurrent(ctx, req.(*RpcChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SendBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendBlock(ctx, req.(*RpcMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_TryCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).TryCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_TryCrypto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).TryCrypto(ctx, req.(*RpcMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetRRInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcGetRRInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRRInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetRRInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRRInfo(ctx, req.(*RpcGetRRInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetBTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTxFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetBTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetBTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetBTransactions(ctx, req.(*RpcTxFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetRRTxByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTXHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRRTxByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetRRTxByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRRTxByHash(ctx, req.(*RpcTXHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Estimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Estimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Estimate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Estimate(ctx, req.(*RpcTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAccountAtHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcAccountAt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetAccountAtHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetAccountAtHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetAccountAtHeight(ctx, req.(*RpcAccountAt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetCommWithProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcChainEpoch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetCommWithProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetCommWithProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetCommWithProof(ctx, req.(*RpcChainEpoch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListRRChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRRChangesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListRRChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListRRChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListRRChanges(ctx, req.(*RpcRRChangesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetConfirmeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcBlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetConfirmeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetConfirmeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetConfirmeds(ctx, req.(*RpcBlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RebootMainChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcReboot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RebootMainChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_RebootMainChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RebootMainChain(ctx, req.(*RpcReboot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListBridgeSessionsToAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcBridgeToAt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListBridgeSessionsToAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListBridgeSessionsToAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListBridgeSessionsToAt(ctx, req.(*RpcBridgeToAt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListRRInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcBlockTxsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListRRInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListRRInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListRRInfos(ctx, req.(*RpcBlockTxsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tkmrpc.node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Node_Ping_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Node_GetAccount_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _Node_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetTxProof",
			Handler:    _Node_GetTxProof_Handler,
		},
		{
			MethodName: "GetTxLocalProof",
			Handler:    _Node_GetTxLocalProof_Handler,
		},
		{
			MethodName: "GetTxFinalProof",
			Handler:    _Node_GetTxFinalProof_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Node_GetTransactions_Handler,
		},
		{
			MethodName: "SendTx",
			Handler:    _Node_SendTx_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Node_GetStats_Handler,
		},
		{
			MethodName: "GetBlockHeader",
			Handler:    _Node_GetBlockHeader_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Node_GetBlock_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _Node_GetBlocks_Handler,
		},
		{
			MethodName: "GetBlockHeaders",
			Handler:    _Node_GetBlockHeaders_Handler,
		},
		{
			MethodName: "GetBlockTxs",
			Handler:    _Node_GetBlockTxs_Handler,
		},
		{
			MethodName: "CallTransaction",
			Handler:    _Node_CallTransaction_Handler,
		},
		{
			MethodName: "GetChainInfo",
			Handler:    _Node_GetChainInfo_Handler,
		},
		{
			MethodName: "GetCommittee",
			Handler:    _Node_GetCommittee_Handler,
		},
		{
			MethodName: "MakeVccProof",
			Handler:    _Node_MakeVccProof_Handler,
		},
		{
			MethodName: "MakeCCCExistenceProof",
			Handler:    _Node_MakeCCCExistenceProof_Handler,
		},
		{
			MethodName: "GetCCCRelativeTx",
			Handler:    _Node_GetCCCRelativeTx_Handler,
		},
		{
			MethodName: "GetAccountWithChainHeight",
			Handler:    _Node_GetAccountWithChainHeight_Handler,
		},
		{
			MethodName: "GetRRProofs",
			Handler:    _Node_GetRRProofs_Handler,
		},
		{
			MethodName: "GetRRCurrent",
			Handler:    _Node_GetRRCurrent_Handler,
		},
		{
			MethodName: "SendBlock",
			Handler:    _Node_SendBlock_Handler,
		},
		{
			MethodName: "TryCrypto",
			Handler:    _Node_TryCrypto_Handler,
		},
		{
			MethodName: "GetRRInfo",
			Handler:    _Node_GetRRInfo_Handler,
		},
		{
			MethodName: "GetBTransactions",
			Handler:    _Node_GetBTransactions_Handler,
		},
		{
			MethodName: "GetRRTxByHash",
			Handler:    _Node_GetRRTxByHash_Handler,
		},
		{
			MethodName: "Estimate",
			Handler:    _Node_Estimate_Handler,
		},
		{
			MethodName: "GetAccountAtHeight",
			Handler:    _Node_GetAccountAtHeight_Handler,
		},
		{
			MethodName: "GetCommWithProof",
			Handler:    _Node_GetCommWithProof_Handler,
		},
		{
			MethodName: "ListRRChanges",
			Handler:    _Node_ListRRChanges_Handler,
		},
		{
			MethodName: "GetConfirmeds",
			Handler:    _Node_GetConfirmeds_Handler,
		},
		{
			MethodName: "RebootMainChain",
			Handler:    _Node_RebootMainChain_Handler,
		},
		{
			MethodName: "ListBridgeSessionsToAt",
			Handler:    _Node_ListBridgeSessionsToAt_Handler,
		},
		{
			MethodName: "ListRRInfos",
			Handler:    _Node_ListRRInfos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
