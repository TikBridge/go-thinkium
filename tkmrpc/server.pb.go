// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.1
// source: server.proto

package tkmrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RpcChainInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid []uint32 `protobuf:"varint,1,rep,packed,name=chainid,proto3" json:"chainid,omitempty"`
}

func (x *RpcChainInfoReq) Reset() {
	*x = RpcChainInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcChainInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcChainInfoReq) ProtoMessage() {}

func (x *RpcChainInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcChainInfoReq.ProtoReflect.Descriptor instead.
func (*RpcChainInfoReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

func (x *RpcChainInfoReq) GetChainid() []uint32 {
	if x != nil {
		return x.Chainid
	}
	return nil
}

type RpcAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid uint32 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Address []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *RpcAddress) Reset() {
	*x = RpcAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcAddress) ProtoMessage() {}

func (x *RpcAddress) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcAddress.ProtoReflect.Descriptor instead.
func (*RpcAddress) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *RpcAddress) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

func (x *RpcAddress) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type RpcTXHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid uint32 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Hash    []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *RpcTXHash) Reset() {
	*x = RpcTXHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcTXHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcTXHash) ProtoMessage() {}

func (x *RpcTXHash) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcTXHash.ProtoReflect.Descriptor instead.
func (*RpcTXHash) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

func (x *RpcTXHash) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

func (x *RpcTXHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type RpcTxProofReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid           uint32 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Hash              []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	ProofedMainHeight uint64 `protobuf:"varint,3,opt,name=proofedMainHeight,proto3" json:"proofedMainHeight,omitempty"`
}

func (x *RpcTxProofReq) Reset() {
	*x = RpcTxProofReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcTxProofReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcTxProofReq) ProtoMessage() {}

func (x *RpcTxProofReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcTxProofReq.ProtoReflect.Descriptor instead.
func (*RpcTxProofReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3}
}

func (x *RpcTxProofReq) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

func (x *RpcTxProofReq) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *RpcTxProofReq) GetProofedMainHeight() uint64 {
	if x != nil {
		return x.ProofedMainHeight
	}
	return 0
}

type RpcTxList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid     uint32      `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Address     *RpcAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	StartHeight uint32      `protobuf:"varint,3,opt,name=startHeight,proto3" json:"startHeight,omitempty"` // include
	EndHeight   uint32      `protobuf:"varint,4,opt,name=endHeight,proto3" json:"endHeight,omitempty"`     // exclude
}

func (x *RpcTxList) Reset() {
	*x = RpcTxList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcTxList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcTxList) ProtoMessage() {}

func (x *RpcTxList) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcTxList.ProtoReflect.Descriptor instead.
func (*RpcTxList) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{4}
}

func (x *RpcTxList) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

func (x *RpcTxList) GetAddress() *RpcAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *RpcTxList) GetStartHeight() uint32 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *RpcTxList) GetEndHeight() uint32 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type RpcTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid   uint32      `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	From      *RpcAddress `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To        *RpcAddress `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Nonce     uint64      `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Val       string      `protobuf:"bytes,5,opt,name=val,proto3" json:"val,omitempty"`
	Input     []byte      `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	Pub       []byte      `protobuf:"bytes,7,opt,name=pub,proto3" json:"pub,omitempty"`
	Sig       []byte      `protobuf:"bytes,8,opt,name=sig,proto3" json:"sig,omitempty"`
	Uselocal  bool        `protobuf:"varint,9,opt,name=uselocal,proto3" json:"uselocal,omitempty"`
	Extra     []byte      `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`
	Multipubs [][]byte    `protobuf:"bytes,11,rep,name=multipubs,proto3" json:"multipubs,omitempty"`
	Multisigs [][]byte    `protobuf:"bytes,12,rep,name=multisigs,proto3" json:"multisigs,omitempty"`
}

func (x *RpcTx) Reset() {
	*x = RpcTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcTx) ProtoMessage() {}

func (x *RpcTx) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcTx.ProtoReflect.Descriptor instead.
func (*RpcTx) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{5}
}

func (x *RpcTx) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

func (x *RpcTx) GetFrom() *RpcAddress {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *RpcTx) GetTo() *RpcAddress {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *RpcTx) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *RpcTx) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

func (x *RpcTx) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *RpcTx) GetPub() []byte {
	if x != nil {
		return x.Pub
	}
	return nil
}

func (x *RpcTx) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *RpcTx) GetUselocal() bool {
	if x != nil {
		return x.Uselocal
	}
	return false
}

func (x *RpcTx) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *RpcTx) GetMultipubs() [][]byte {
	if x != nil {
		return x.Multipubs
	}
	return nil
}

func (x *RpcTx) GetMultisigs() [][]byte {
	if x != nil {
		return x.Multisigs
	}
	return nil
}

type RpcStatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid uint32 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
}

func (x *RpcStatsReq) Reset() {
	*x = RpcStatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcStatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcStatsReq) ProtoMessage() {}

func (x *RpcStatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcStatsReq.ProtoReflect.Descriptor instead.
func (*RpcStatsReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{6}
}

func (x *RpcStatsReq) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

type RpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RpcRequest) Reset() {
	*x = RpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcRequest) ProtoMessage() {}

func (x *RpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcRequest.ProtoReflect.Descriptor instead.
func (*RpcRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{7}
}

func (x *RpcRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RpcChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid uint32 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
}

func (x *RpcChainRequest) Reset() {
	*x = RpcChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcChainRequest) ProtoMessage() {}

func (x *RpcChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcChainRequest.ProtoReflect.Descriptor instead.
func (*RpcChainRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{8}
}

func (x *RpcChainRequest) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

type RpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data   string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Detail string `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *RpcResponse) Reset() {
	*x = RpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcResponse) ProtoMessage() {}

func (x *RpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcResponse.ProtoReflect.Descriptor instead.
func (*RpcResponse) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{9}
}

func (x *RpcResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RpcResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *RpcResponse) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type RpcBlockHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid uint32 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *RpcBlockHeight) Reset() {
	*x = RpcBlockHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcBlockHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcBlockHeight) ProtoMessage() {}

func (x *RpcBlockHeight) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcBlockHeight.ProtoReflect.Descriptor instead.
func (*RpcBlockHeight) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{10}
}

func (x *RpcBlockHeight) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

func (x *RpcBlockHeight) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type RpcChainEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid uint32 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Epoch   uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *RpcChainEpoch) Reset() {
	*x = RpcChainEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcChainEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcChainEpoch) ProtoMessage() {}

func (x *RpcChainEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcChainEpoch.ProtoReflect.Descriptor instead.
func (*RpcChainEpoch) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{11}
}

func (x *RpcChainEpoch) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

func (x *RpcChainEpoch) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type RpcBlockTxsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid uint32 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Page    int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *RpcBlockTxsReq) Reset() {
	*x = RpcBlockTxsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcBlockTxsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcBlockTxsReq) ProtoMessage() {}

func (x *RpcBlockTxsReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcBlockTxsReq.ProtoReflect.Descriptor instead.
func (*RpcBlockTxsReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{12}
}

func (x *RpcBlockTxsReq) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

func (x *RpcBlockTxsReq) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RpcBlockTxsReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RpcBlockTxsReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type RpcCashCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid      uint32      `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	From         *RpcAddress `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To           *RpcAddress `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Nonce        uint64      `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ExpireHeight uint64      `protobuf:"varint,5,opt,name=expireHeight,proto3" json:"expireHeight,omitempty"`
	Amount       string      `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Uselocal     bool        `protobuf:"varint,7,opt,name=uselocal,proto3" json:"uselocal,omitempty"`
	ParentChain  uint32      `protobuf:"varint,8,opt,name=parentChain,proto3" json:"parentChain,omitempty"`
	IsShard      bool        `protobuf:"varint,9,opt,name=isShard,proto3" json:"isShard,omitempty"`
	CurrencyId   int32       `protobuf:"varint,10,opt,name=currencyId,proto3" json:"currencyId,omitempty"`
}

func (x *RpcCashCheck) Reset() {
	*x = RpcCashCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcCashCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcCashCheck) ProtoMessage() {}

func (x *RpcCashCheck) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcCashCheck.ProtoReflect.Descriptor instead.
func (*RpcCashCheck) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{13}
}

func (x *RpcCashCheck) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

func (x *RpcCashCheck) GetFrom() *RpcAddress {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *RpcCashCheck) GetTo() *RpcAddress {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *RpcCashCheck) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *RpcCashCheck) GetExpireHeight() uint64 {
	if x != nil {
		return x.ExpireHeight
	}
	return 0
}

func (x *RpcCashCheck) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RpcCashCheck) GetUselocal() bool {
	if x != nil {
		return x.Uselocal
	}
	return false
}

func (x *RpcCashCheck) GetParentChain() uint32 {
	if x != nil {
		return x.ParentChain
	}
	return 0
}

func (x *RpcCashCheck) GetIsShard() bool {
	if x != nil {
		return x.IsShard
	}
	return false
}

func (x *RpcCashCheck) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

type RpcRRProofReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId  uint32 `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	RootHash []byte `protobuf:"bytes,3,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
	NodeHash []byte `protobuf:"bytes,4,opt,name=nodeHash,proto3" json:"nodeHash,omitempty"`
	Pub      []byte `protobuf:"bytes,5,opt,name=pub,proto3" json:"pub,omitempty"`
	Sig      []byte `protobuf:"bytes,6,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *RpcRRProofReq) Reset() {
	*x = RpcRRProofReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcRRProofReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcRRProofReq) ProtoMessage() {}

func (x *RpcRRProofReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcRRProofReq.ProtoReflect.Descriptor instead.
func (*RpcRRProofReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{14}
}

func (x *RpcRRProofReq) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *RpcRRProofReq) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *RpcRRProofReq) GetNodeHash() []byte {
	if x != nil {
		return x.NodeHash
	}
	return nil
}

func (x *RpcRRProofReq) GetPub() []byte {
	if x != nil {
		return x.Pub
	}
	return nil
}

func (x *RpcRRProofReq) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

type RpcMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Msg  []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *RpcMsgReq) Reset() {
	*x = RpcMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcMsgReq) ProtoMessage() {}

func (x *RpcMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcMsgReq.ProtoReflect.Descriptor instead.
func (*RpcMsgReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{15}
}

func (x *RpcMsgReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RpcMsgReq) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

type RpcResponseStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Stream []byte `protobuf:"bytes,3,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *RpcResponseStream) Reset() {
	*x = RpcResponseStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcResponseStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcResponseStream) ProtoMessage() {}

func (x *RpcResponseStream) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcResponseStream.ProtoReflect.Descriptor instead.
func (*RpcResponseStream) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{16}
}

func (x *RpcResponseStream) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RpcResponseStream) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RpcResponseStream) GetStream() []byte {
	if x != nil {
		return x.Stream
	}
	return nil
}

type RpcGetRRInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId []byte `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Era    int64  `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
	Root   []byte `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *RpcGetRRInfoReq) Reset() {
	*x = RpcGetRRInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcGetRRInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcGetRRInfoReq) ProtoMessage() {}

func (x *RpcGetRRInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcGetRRInfoReq.ProtoReflect.Descriptor instead.
func (*RpcGetRRInfoReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{17}
}

func (x *RpcGetRRInfoReq) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *RpcGetRRInfoReq) GetEra() int64 {
	if x != nil {
		return x.Era
	}
	return 0
}

func (x *RpcGetRRInfoReq) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

type RpcTxFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid     uint32      `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Address     *RpcAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	StartHeight uint64      `protobuf:"varint,3,opt,name=startHeight,proto3" json:"startHeight,omitempty"` // include
	EndHeight   uint64      `protobuf:"varint,4,opt,name=endHeight,proto3" json:"endHeight,omitempty"`     // exclude
}

func (x *RpcTxFilter) Reset() {
	*x = RpcTxFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcTxFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcTxFilter) ProtoMessage() {}

func (x *RpcTxFilter) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcTxFilter.ProtoReflect.Descriptor instead.
func (*RpcTxFilter) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{18}
}

func (x *RpcTxFilter) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

func (x *RpcTxFilter) GetAddress() *RpcAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *RpcTxFilter) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *RpcTxFilter) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type RpcAccountAt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chainid uint32 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Address []byte `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *RpcAccountAt) Reset() {
	*x = RpcAccountAt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcAccountAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcAccountAt) ProtoMessage() {}

func (x *RpcAccountAt) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcAccountAt.ProtoReflect.Descriptor instead.
func (*RpcAccountAt) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{19}
}

func (x *RpcAccountAt) GetChainid() uint32 {
	if x != nil {
		return x.Chainid
	}
	return 0
}

func (x *RpcAccountAt) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RpcAccountAt) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type RpcRRChangesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root []byte `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *RpcRRChangesReq) Reset() {
	*x = RpcRRChangesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcRRChangesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcRRChangesReq) ProtoMessage() {}

func (x *RpcRRChangesReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcRRChangesReq.ProtoReflect.Descriptor instead.
func (*RpcRRChangesReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{20}
}

func (x *RpcRRChangesReq) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

type RpcReboot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastHeight uint64   `protobuf:"varint,1,opt,name=lastHeight,proto3" json:"lastHeight,omitempty"`
	LastHash   []byte   `protobuf:"bytes,2,opt,name=lastHash,proto3" json:"lastHash,omitempty"`
	Comm       [][]byte `protobuf:"bytes,3,rep,name=comm,proto3" json:"comm,omitempty"`
	Pubs       [][]byte `protobuf:"bytes,4,rep,name=pubs,proto3" json:"pubs,omitempty"`
	Sigs       [][]byte `protobuf:"bytes,5,rep,name=sigs,proto3" json:"sigs,omitempty"`
}

func (x *RpcReboot) Reset() {
	*x = RpcReboot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcReboot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcReboot) ProtoMessage() {}

func (x *RpcReboot) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcReboot.ProtoReflect.Descriptor instead.
func (*RpcReboot) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{21}
}

func (x *RpcReboot) GetLastHeight() uint64 {
	if x != nil {
		return x.LastHeight
	}
	return 0
}

func (x *RpcReboot) GetLastHash() []byte {
	if x != nil {
		return x.LastHash
	}
	return nil
}

func (x *RpcReboot) GetComm() [][]byte {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *RpcReboot) GetPubs() [][]byte {
	if x != nil {
		return x.Pubs
	}
	return nil
}

func (x *RpcReboot) GetSigs() [][]byte {
	if x != nil {
		return x.Sigs
	}
	return nil
}

type RpcBridgeToAt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentChain uint32 `protobuf:"varint,1,opt,name=currentChain,proto3" json:"currentChain,omitempty"`
	AtHeight     uint64 `protobuf:"varint,2,opt,name=atHeight,proto3" json:"atHeight,omitempty"`
	ToChain      uint32 `protobuf:"varint,3,opt,name=toChain,proto3" json:"toChain,omitempty"`
	ReqHeight    uint64 `protobuf:"varint,4,opt,name=reqHeight,proto3" json:"reqHeight,omitempty"`
}

func (x *RpcBridgeToAt) Reset() {
	*x = RpcBridgeToAt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcBridgeToAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcBridgeToAt) ProtoMessage() {}

func (x *RpcBridgeToAt) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcBridgeToAt.ProtoReflect.Descriptor instead.
func (*RpcBridgeToAt) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{22}
}

func (x *RpcBridgeToAt) GetCurrentChain() uint32 {
	if x != nil {
		return x.CurrentChain
	}
	return 0
}

func (x *RpcBridgeToAt) GetAtHeight() uint64 {
	if x != nil {
		return x.AtHeight
	}
	return 0
}

func (x *RpcBridgeToAt) GetToChain() uint32 {
	if x != nil {
		return x.ToChain
	}
	return 0
}

func (x *RpcBridgeToAt) GetReqHeight() uint64 {
	if x != nil {
		return x.ReqHeight
	}
	return 0
}

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x22, 0x2b, 0x0a, 0x0f, 0x52, 0x70, 0x63, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x0a, 0x52, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x39, 0x0a, 0x09, 0x52, 0x70, 0x63, 0x54, 0x58, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x6b, 0x0a, 0x0d, 0x52, 0x70, 0x63, 0x54, 0x78, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x93, 0x01,
	0x0a, 0x09, 0x52, 0x70, 0x63, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x05, 0x52, 0x70, 0x63, 0x54, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x22, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6b,
	0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x70, 0x75, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x75, 0x62, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x75, 0x62, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x73, 0x22, 0x27, 0x0a, 0x0b, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x0a,
	0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b,
	0x0a, 0x0f, 0x52, 0x70, 0x63, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x0b, 0x52,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x42, 0x0a, 0x0e, 0x52, 0x70,
	0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3f,
	0x0a, 0x0d, 0x52, 0x70, 0x63, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22,
	0x6a, 0x0a, 0x0e, 0x52, 0x70, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x0c,
	0x52, 0x70, 0x63, 0x43, 0x61, 0x73, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x22,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6b, 0x6d,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a,
	0x0d, 0x52, 0x70, 0x63, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x75, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x70,
	0x75, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x73, 0x69, 0x67, 0x22, 0x31, 0x0a, 0x09, 0x52, 0x70, 0x63, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x51, 0x0a, 0x11, 0x52, 0x70, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x4f, 0x0a, 0x0f, 0x52, 0x70,
	0x63, 0x47, 0x65, 0x74, 0x52, 0x52, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x65, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0b,
	0x52, 0x70, 0x63, 0x54, 0x78, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x5a, 0x0a, 0x0c, 0x52, 0x70, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x25, 0x0a, 0x0f, 0x52, 0x70, 0x63, 0x52, 0x52, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x09, 0x52, 0x70, 0x63, 0x52, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04,
	0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x70, 0x75, 0x62, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x73, 0x22, 0x87, 0x01, 0x0a,
	0x0d, 0x52, 0x70, 0x63, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x41, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x32, 0xa8, 0x11, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x6b,
	0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x11, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x54, 0x58, 0x48, 0x61,
	0x73, 0x68, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x78,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x11, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x70, 0x63, 0x54, 0x58, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x54, 0x78, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x11, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x54, 0x58, 0x48,
	0x61, 0x73, 0x68, 0x1a, 0x19, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x43,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x15, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x54, 0x78,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x11, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x70, 0x63, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x78, 0x12, 0x0d, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x70, 0x63, 0x54, 0x78, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e,
	0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70,
	0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x13, 0x2e, 0x74,
	0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e,
	0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x2e,
	0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x3e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x6b,
	0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x73, 0x12,
	0x16, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x78, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0f,
	0x43, 0x61, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0d, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x54, 0x78, 0x1a, 0x13,
	0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x74,
	0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x12, 0x15, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x56, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x2e,
	0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x61, 0x73, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x15, 0x4d, 0x61, 0x6b, 0x65,
	0x43, 0x43, 0x43, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x14, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x61,
	0x73, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x43, 0x43, 0x43, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x78,
	0x12, 0x14, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x61, 0x73,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x13, 0x2e, 0x74,
	0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73,
	0x12, 0x15, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x52, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x52, 0x52, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x74,
	0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x53, 0x65,
	0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x70, 0x63, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x09, 0x54, 0x72, 0x79, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x11, 0x2e, 0x74,
	0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x52, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x47, 0x65,
	0x74, 0x52, 0x52, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x74, 0x6b, 0x6d,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x54, 0x78, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x19,
	0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x52, 0x52, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x11, 0x2e, 0x74, 0x6b, 0x6d,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x54, 0x58, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x19, 0x2e,
	0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x08, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70,
	0x63, 0x54, 0x78, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14,
	0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x15, 0x2e,
	0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x1a, 0x19, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x43, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x52, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x17, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x52, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x74, 0x6b, 0x6d, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x73, 0x12, 0x16, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x70, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x19, 0x2e,
	0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x0f, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x11, 0x2e, 0x74, 0x6b,
	0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x1a, 0x13,
	0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x41, 0x74, 0x12, 0x15, 0x2e,
	0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x54, 0x6f, 0x41, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x40, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x52, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x16,
	0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x78, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x74, 0x6b, 0x6d, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData = file_server_proto_rawDesc
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_rawDescData)
	})
	return file_server_proto_rawDescData
}

var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_server_proto_goTypes = []interface{}{
	(*RpcChainInfoReq)(nil),   // 0: tkmrpc.RpcChainInfoReq
	(*RpcAddress)(nil),        // 1: tkmrpc.RpcAddress
	(*RpcTXHash)(nil),         // 2: tkmrpc.RpcTXHash
	(*RpcTxProofReq)(nil),     // 3: tkmrpc.RpcTxProofReq
	(*RpcTxList)(nil),         // 4: tkmrpc.RpcTxList
	(*RpcTx)(nil),             // 5: tkmrpc.RpcTx
	(*RpcStatsReq)(nil),       // 6: tkmrpc.RpcStatsReq
	(*RpcRequest)(nil),        // 7: tkmrpc.RpcRequest
	(*RpcChainRequest)(nil),   // 8: tkmrpc.RpcChainRequest
	(*RpcResponse)(nil),       // 9: tkmrpc.RpcResponse
	(*RpcBlockHeight)(nil),    // 10: tkmrpc.RpcBlockHeight
	(*RpcChainEpoch)(nil),     // 11: tkmrpc.RpcChainEpoch
	(*RpcBlockTxsReq)(nil),    // 12: tkmrpc.RpcBlockTxsReq
	(*RpcCashCheck)(nil),      // 13: tkmrpc.RpcCashCheck
	(*RpcRRProofReq)(nil),     // 14: tkmrpc.RpcRRProofReq
	(*RpcMsgReq)(nil),         // 15: tkmrpc.RpcMsgReq
	(*RpcResponseStream)(nil), // 16: tkmrpc.RpcResponseStream
	(*RpcGetRRInfoReq)(nil),   // 17: tkmrpc.RpcGetRRInfoReq
	(*RpcTxFilter)(nil),       // 18: tkmrpc.RpcTxFilter
	(*RpcAccountAt)(nil),      // 19: tkmrpc.RpcAccountAt
	(*RpcRRChangesReq)(nil),   // 20: tkmrpc.RpcRRChangesReq
	(*RpcReboot)(nil),         // 21: tkmrpc.RpcReboot
	(*RpcBridgeToAt)(nil),     // 22: tkmrpc.RpcBridgeToAt
}
var file_server_proto_depIdxs = []int32{
	1,  // 0: tkmrpc.RpcTxList.address:type_name -> tkmrpc.RpcAddress
	1,  // 1: tkmrpc.RpcTx.from:type_name -> tkmrpc.RpcAddress
	1,  // 2: tkmrpc.RpcTx.to:type_name -> tkmrpc.RpcAddress
	1,  // 3: tkmrpc.RpcCashCheck.from:type_name -> tkmrpc.RpcAddress
	1,  // 4: tkmrpc.RpcCashCheck.to:type_name -> tkmrpc.RpcAddress
	1,  // 5: tkmrpc.RpcTxFilter.address:type_name -> tkmrpc.RpcAddress
	7,  // 6: tkmrpc.node.Ping:input_type -> tkmrpc.RpcRequest
	1,  // 7: tkmrpc.node.GetAccount:input_type -> tkmrpc.RpcAddress
	2,  // 8: tkmrpc.node.GetTransactionByHash:input_type -> tkmrpc.RpcTXHash
	2,  // 9: tkmrpc.node.GetTxProof:input_type -> tkmrpc.RpcTXHash
	2,  // 10: tkmrpc.node.GetTxLocalProof:input_type -> tkmrpc.RpcTXHash
	3,  // 11: tkmrpc.node.GetTxFinalProof:input_type -> tkmrpc.RpcTxProofReq
	4,  // 12: tkmrpc.node.GetTransactions:input_type -> tkmrpc.RpcTxList
	5,  // 13: tkmrpc.node.SendTx:input_type -> tkmrpc.RpcTx
	6,  // 14: tkmrpc.node.GetStats:input_type -> tkmrpc.RpcStatsReq
	10, // 15: tkmrpc.node.GetBlockHeader:input_type -> tkmrpc.RpcBlockHeight
	10, // 16: tkmrpc.node.GetBlock:input_type -> tkmrpc.RpcBlockHeight
	10, // 17: tkmrpc.node.GetBlocks:input_type -> tkmrpc.RpcBlockHeight
	10, // 18: tkmrpc.node.GetBlockHeaders:input_type -> tkmrpc.RpcBlockHeight
	12, // 19: tkmrpc.node.GetBlockTxs:input_type -> tkmrpc.RpcBlockTxsReq
	5,  // 20: tkmrpc.node.CallTransaction:input_type -> tkmrpc.RpcTx
	0,  // 21: tkmrpc.node.GetChainInfo:input_type -> tkmrpc.RpcChainInfoReq
	11, // 22: tkmrpc.node.GetCommittee:input_type -> tkmrpc.RpcChainEpoch
	13, // 23: tkmrpc.node.MakeVccProof:input_type -> tkmrpc.RpcCashCheck
	13, // 24: tkmrpc.node.MakeCCCExistenceProof:input_type -> tkmrpc.RpcCashCheck
	13, // 25: tkmrpc.node.GetCCCRelativeTx:input_type -> tkmrpc.RpcCashCheck
	1,  // 26: tkmrpc.node.GetAccountWithChainHeight:input_type -> tkmrpc.RpcAddress
	14, // 27: tkmrpc.node.GetRRProofs:input_type -> tkmrpc.RpcRRProofReq
	8,  // 28: tkmrpc.node.GetRRCurrent:input_type -> tkmrpc.RpcChainRequest
	15, // 29: tkmrpc.node.SendBlock:input_type -> tkmrpc.RpcMsgReq
	15, // 30: tkmrpc.node.TryCrypto:input_type -> tkmrpc.RpcMsgReq
	17, // 31: tkmrpc.node.GetRRInfo:input_type -> tkmrpc.RpcGetRRInfoReq
	18, // 32: tkmrpc.node.GetBTransactions:input_type -> tkmrpc.RpcTxFilter
	2,  // 33: tkmrpc.node.GetRRTxByHash:input_type -> tkmrpc.RpcTXHash
	5,  // 34: tkmrpc.node.Estimate:input_type -> tkmrpc.RpcTx
	19, // 35: tkmrpc.node.GetAccountAtHeight:input_type -> tkmrpc.RpcAccountAt
	11, // 36: tkmrpc.node.GetCommWithProof:input_type -> tkmrpc.RpcChainEpoch
	20, // 37: tkmrpc.node.ListRRChanges:input_type -> tkmrpc.RpcRRChangesReq
	10, // 38: tkmrpc.node.GetConfirmeds:input_type -> tkmrpc.RpcBlockHeight
	21, // 39: tkmrpc.node.RebootMainChain:input_type -> tkmrpc.RpcReboot
	22, // 40: tkmrpc.node.ListBridgeSessionsToAt:input_type -> tkmrpc.RpcBridgeToAt
	12, // 41: tkmrpc.node.ListRRInfos:input_type -> tkmrpc.RpcBlockTxsReq
	9,  // 42: tkmrpc.node.Ping:output_type -> tkmrpc.RpcResponse
	9,  // 43: tkmrpc.node.GetAccount:output_type -> tkmrpc.RpcResponse
	9,  // 44: tkmrpc.node.GetTransactionByHash:output_type -> tkmrpc.RpcResponse
	9,  // 45: tkmrpc.node.GetTxProof:output_type -> tkmrpc.RpcResponse
	16, // 46: tkmrpc.node.GetTxLocalProof:output_type -> tkmrpc.RpcResponseStream
	16, // 47: tkmrpc.node.GetTxFinalProof:output_type -> tkmrpc.RpcResponseStream
	9,  // 48: tkmrpc.node.GetTransactions:output_type -> tkmrpc.RpcResponse
	9,  // 49: tkmrpc.node.SendTx:output_type -> tkmrpc.RpcResponse
	9,  // 50: tkmrpc.node.GetStats:output_type -> tkmrpc.RpcResponse
	9,  // 51: tkmrpc.node.GetBlockHeader:output_type -> tkmrpc.RpcResponse
	16, // 52: tkmrpc.node.GetBlock:output_type -> tkmrpc.RpcResponseStream
	16, // 53: tkmrpc.node.GetBlocks:output_type -> tkmrpc.RpcResponseStream
	9,  // 54: tkmrpc.node.GetBlockHeaders:output_type -> tkmrpc.RpcResponse
	9,  // 55: tkmrpc.node.GetBlockTxs:output_type -> tkmrpc.RpcResponse
	9,  // 56: tkmrpc.node.CallTransaction:output_type -> tkmrpc.RpcResponse
	9,  // 57: tkmrpc.node.GetChainInfo:output_type -> tkmrpc.RpcResponse
	9,  // 58: tkmrpc.node.GetCommittee:output_type -> tkmrpc.RpcResponse
	9,  // 59: tkmrpc.node.MakeVccProof:output_type -> tkmrpc.RpcResponse
	9,  // 60: tkmrpc.node.MakeCCCExistenceProof:output_type -> tkmrpc.RpcResponse
	9,  // 61: tkmrpc.node.GetCCCRelativeTx:output_type -> tkmrpc.RpcResponse
	9,  // 62: tkmrpc.node.GetAccountWithChainHeight:output_type -> tkmrpc.RpcResponse
	9,  // 63: tkmrpc.node.GetRRProofs:output_type -> tkmrpc.RpcResponse
	9,  // 64: tkmrpc.node.GetRRCurrent:output_type -> tkmrpc.RpcResponse
	9,  // 65: tkmrpc.node.SendBlock:output_type -> tkmrpc.RpcResponse
	9,  // 66: tkmrpc.node.TryCrypto:output_type -> tkmrpc.RpcResponse
	16, // 67: tkmrpc.node.GetRRInfo:output_type -> tkmrpc.RpcResponseStream
	16, // 68: tkmrpc.node.GetBTransactions:output_type -> tkmrpc.RpcResponseStream
	16, // 69: tkmrpc.node.GetRRTxByHash:output_type -> tkmrpc.RpcResponseStream
	9,  // 70: tkmrpc.node.Estimate:output_type -> tkmrpc.RpcResponse
	9,  // 71: tkmrpc.node.GetAccountAtHeight:output_type -> tkmrpc.RpcResponse
	16, // 72: tkmrpc.node.GetCommWithProof:output_type -> tkmrpc.RpcResponseStream
	16, // 73: tkmrpc.node.ListRRChanges:output_type -> tkmrpc.RpcResponseStream
	16, // 74: tkmrpc.node.GetConfirmeds:output_type -> tkmrpc.RpcResponseStream
	9,  // 75: tkmrpc.node.RebootMainChain:output_type -> tkmrpc.RpcResponse
	16, // 76: tkmrpc.node.ListBridgeSessionsToAt:output_type -> tkmrpc.RpcResponseStream
	16, // 77: tkmrpc.node.ListRRInfos:output_type -> tkmrpc.RpcResponseStream
	42, // [42:78] is the sub-list for method output_type
	6,  // [6:42] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcChainInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcTXHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcTxProofReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcTxList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcStatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcBlockHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcChainEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcBlockTxsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcCashCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcRRProofReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcResponseStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcGetRRInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcTxFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcAccountAt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcRRChangesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcReboot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcBridgeToAt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_rawDesc = nil
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}
