pragma experimental ABIEncoderV2;
pragma solidity ^0.5.9;

contract Bridge{
    // ERC20 transfer _value from _sender to Bridge system contract at _token erc20contract
    function transferERC20(address _token, uint256 _value, uint32 _toChain, address _toToken) external;

    // ERC721 transfer _tokenId from _sender to Bridge system contract at _token erc721contract
    function transferERC721(address _token, uint256 _tokenId, bytes calldata _data, uint32 _toChain, address _toToken) external;

    // ERC1155 transfer _value of _id from _sender to Bridge system contract at _token erc1155contract
    function transferERC1155(address _token, uint256 _id, uint256 _value, bytes calldata _data, uint32 _toChain, address _toToken) external;

    // ERC20 burn _amount in _sender account at _token erc20contract
    function burnERC20(address _token, uint256 _amount, uint32 _toChain, address _toToken) external;

    // ERC721 burn _tokenId of _sender at _token erc721contract
    function burnERC721(address _token, uint256 _tokenId, uint32 _toChain, address _toToken) external;

    // ERC1155 burn _amount of _id of _sender at _token erc1155contract
    function burnERC1155(address _token, uint256 _id, uint256 _amount, uint32 _toChain, address _toToken) external;

    // only failed request can be withdrew
    function withdraw(uint32 _reqToChain, uint64 _reqNonce) external;

    struct reqInfo {
        uint256 fromChain;
        uint256 height;
        address account;
        uint256 nonce;
        uint256 contractType; // 0: target contract is main contract of the bridge, 1: is the mapping contract
    }

    // the From MUST BE AddressOfSysBridge for all transactions generated by sysBridge

    // sysBridge generated txs: process the bridge request in target chain
    function processERC20Req(reqInfo calldata _request, address _toToken, address _to, uint256 _value) external;
    function processERC721Req(reqInfo calldata _request, address _toToken, address _to, uint256 _tokenId, bytes calldata _data) external;
    function processERC1155Req(reqInfo calldata _request, address _toToken, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;
    function processFailed(reqInfo calldata _request) external;

    // sysBridge generated txs: update bridge request status in source chain by target chain response
    function updateReqStatus(uint64 _reqHeight, uint32 _targetChain, uint64 _respHeight, address _account, uint64 _nonce, bool _success) external;

    // sysBridge generated txs: remove bridge request or response from trie in source chain
    function removeProcessedReqs(uint32 _toChain, uint64 _cursor) external;
    function removeProcessedResps(uint32 _toChain, uint64 _cursor) external;


    // callback for ERC721 transfer
    /// @notice Handle the receipt of an NFT
    /// @dev The ERC721 smart contract calls this function on the recipient
    ///  after a `transfer`. This function MAY throw to revert and reject the
    ///  transfer. Return of other than the magic value MUST result in the
    ///  transaction being reverted.
    ///  Note: the contract address is always the message sender.
    /// @param _operator The address which called `safeTransferFrom` function
    /// @param _from The address which previously owned the token
    /// @param _tokenId The NFT identifier which is being transferred
    /// @param _data Additional data with no specified format
    /// @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
    ///  unless throwing
    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);

    // callback for ERC1155 transfer
    /**
        @notice Handle the receipt of a single ERC1155 token type.
        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.
        This function MUST return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` (i.e. 0xf23a6e61) if it accepts the transfer.
        This function MUST revert if it rejects the transfer.
        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.
        @param _operator  The address which initiated the transfer (i.e. msg.sender)
        @param _from      The address which previously owned the token
        @param _id        The ID of the token being transferred
        @param _value     The amount of tokens being transferred
        @param _data      Additional data with no specified format
        @return           `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
    */
    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);
}